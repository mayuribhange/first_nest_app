type Restaurant {
 _id: String
  restaurantName: String
  restaurantEmail: String
  restaurantPhone: String
  restaurantCity: String
  restaurantState: String
  restaurantAddress:String
  restaurantType:String
  isActive: Boolean
  isDeleted: Boolean
}

input CreateRestaurantInput {
 restaurantName: String
  restaurantEmail: String
  password:String
  restaurantPhone: String
  restaurantCity: String
  restaurantState: String
  restaurantAddress:String
  restaurantType:String
  isActive: Boolean
  isDeleted: Boolean
}

input UpdateRestaurantInput {
  id: Int!
}
input CreateFoodCategory {
 categoryName:String 
}
type FoodCategory{
  _id: String
  categoryName:String
}
type LoggedInOutput{
  _id:String,
  message:String,
  token:String
}

type Query {
  getAllRestaurant: [Restaurant]
  getRestaurantById(id: String!): Restaurant
  restaurantLogin(restaurantEmail:String!,password:String!):LoggedInOutput
  getAllFoodCategory: [FoodCategory]
  getFoodCategoryById(id: String!): FoodCategory
}

type Mutation {
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): String
  createFoodCategory(createFoodCategoryInput: CreateFoodCategory!):String
  updateRestaurant(id:ID!,createRestaurantInput: CreateRestaurantInput!):String
  removeRestaurant(id: ID!): String
  # createFoodCategory(createFoodCategory:CreateFoodCategory!):String
}
